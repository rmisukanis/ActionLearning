<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="style.css">
    <title>QuickBooks Assets Dashboard</title>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>QuickBooks Assets Management</h1>
            <p>Comprehensive tracking and management of your business assets</p>
        </div>

        <!-- Summary Cards -->
        <div class="summary-cards" id="summaryCards" style="display: none;">
            <div class="summary-card">
                <div class="summary-card-header">
                    <div class="summary-card-icon assets">📊</div>
                    <div class="summary-card-title">Total Assets</div>
                </div>
                <div class="summary-card-value" id="totalAssets">0</div>
            </div>

            <div class="summary-card">
                <div class="summary-card-header">
                    <div class="summary-card-icon amount">💰</div>
                    <div class="summary-card-title">Total Value</div>
                </div>
                <div class="summary-card-value" id="totalAmount">$0.00</div>
            </div>

            <div class="summary-card">
                <div class="summary-card-header">
                    <div class="summary-card-icon accounts">🏢</div>
                    <div class="summary-card-title">Accounts</div>
                </div>
                <div class="summary-card-value" id="uniqueAccounts">0</div>
            </div>

            <div class="summary-card">
                <div class="summary-card-header">
                    <div class="summary-card-icon range">📅</div>
                    <div class="summary-card-title">Date Range</div>
                </div>
                <div class="summary-card-value" id="dateRange" style="font-size: 14px; font-weight: 600;">Select dates
                </div>
            </div>
        </div>

        <!-- Controls Section -->
        <div class="controls">
            <div class="controls-header">
                <h2 class="controls-title">🔍 Search & Filter Assets</h2>
            </div>

            <form id="dateRangeForm" class="controls-form">
                <div class="form-group">
                    <label for="startDate">Start Date</label>
                    <input type="date" id="startDate" name="startDate" required>
                </div>

                <div class="form-group">
                    <label for="endDate">End Date</label>
                    <input type="date" id="endDate" name="endDate" required>
                </div>

                <div class="form-group">
                    <label for="accountFilter">Account Filter</label>
                    <select id="accountFilter" name="accountFilter">
                        <option value="">All Accounts</option>
                        <option value="37">Truck</option>
                        <option value="38">Office Equipment</option>
                        <option value="39">Computer Hardware</option>
                        <option value="40">Machinery</option>
                    </select>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn">🔄 Load Data</button>
                </div>

                <div class="form-group">
                    <button type="button" class="btn btn-secondary" id="getJournal" onclick="loadDepreciationData()">📊
                        View
                        Journal</button>
                </div>
            </form>
        </div>

        <!-- Messages -->
        <div id="errorMessage" class="error-message"></div>
        <div id="successMessage" class="success-message"></div>

        <!-- Loading -->
        <div id="loading" class="loading">
            <div class="loading-spinner"></div>
            <p>Loading assets data from QuickBooks...</p>
        </div>

        <!-- Assets Table -->
        <div class="table-section" id="tableSection" style="display: none;">
            <div class="table-header">
                <h3 class="table-title" id="tableTitle">Assets (0)</h3>
            </div>

            <div class="table-container">
                <table class="assets-table" id="assetsTable">
                    <thead>
                        <tr>
                            <th>Bill ID</th>
                            <th>Transaction Date</th>
                            <th>Amount</th>
                            <th>Description</th>
                            <th>Account</th>
                            <th>Account Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="assetsTableBody">
                        <!-- Data will be populated here -->
                    </tbody>
                </table>
            </div>

            <div id="noData" class="no-data" style="display: none;">
                <div class="no-data-icon">📭</div>
                <h3>No assets data found</h3>
                <p>No assets found for the selected period.</p>
                <p>Please select a different date range or check your QuickBooks data.</p>
            </div>
            <!-- pagination -->
            <div id="pagination" class="pagination"></div>
        </div>

        <!-- Depreciation Table -->
        <div class="table-section" id="depreciationTableSection" style="display: none;">
            <div class="table-header">
                <h3 class="table-title" id="tableTitle">Depreciation Journal</h3>
                <div class="button-group">
                    <button class="btn btn-secondary" id="updateJournalBtn">🔄 Update</button>
                    <button class="btn" id="submitJournalBtn">✅ Submit</button>
                </div>
            </div>
            <div class="journal-entry">
                <label>Depreciation Expense of the current month:</label>
                <input type="text" class="journal-entry-input" id="depreciationExpense"
                    placeholder="Depreciation Expense" disabled><br><br>
            </div>

            <div class="table-container">
                <table class="depreciation-table" id="depreciationTable">
                </table>
            </div>

            <div id="noData" class="no-data" style="display: none;">
                <div class="no-data-icon">📭</div>
                <h3>No assets data found</h3>
                <p>No assets found for the selected period.</p>
                <p>Please select a different date range or check your QuickBooks data.</p>
            </div>

        </div>

    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">✏️ Edit Asset</h3>
                <label class="modal-title">Straight-line Method</label>
            </div>

            <form id="editForm" class="modal-form">
                <input type="hidden" id="editBillId" name="billId">

                <div class="form-group">
                    <label for="initialCost">Initial Cost</label>
                    <input type="number" id="initialCost" name="initialCost" value="" disabled>
                </div>

                <div class="form-group">
                    <label for="editDepreciationYears">Depreciation Period</label>
                    <input type="number" id="editDepreciationYears" name="depreciationYears"
                        placeholder="Please indicate how many years the asset will be depreciated over" min="1"
                        required>
                </div>

                <div class="form-group">
                    <label for="editSalvageValue">Salvage Value</label>
                    <input type="number" id="editSalvageValue" name="salvageValue" min="0" max="1" required>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn btn-cancel" onclick="closeEditModal()">Cancel</button>
                    <button type="submit" class="btn btn-secondary">💾 Save Changes</button>
                </div>
            </form>
        </div>
    </div>
    </div>

    <script>
        let assetsData = [];

        // Initialize the page
        // Script logic initialized when the page loads to set the default date range and update the asset summary display on the page
        document.addEventListener('DOMContentLoaded', function () {
            // Set default dates (last 30 days)
            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(startDate.getDate() - 30);

            document.getElementById('startDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('endDate').value = endDate.toISOString().split('T')[0];

            // Show empty summary cards on load
            updateSummary([], startDate.toISOString().split('T')[0], endDate.toISOString().split('T')[0]);
        });

        // Handle form submission
        document.getElementById('dateRangeForm').addEventListener('submit', function (e) {
            e.preventDefault();
            loadAssetsData();
        });

        // Handle edit form submission
        document.getElementById('editForm').addEventListener('submit', function (e) {
            e.preventDefault();
            saveAssetChanges();
            //reload data after saving
            loadAssetsData();
            // Load depreciation table while submitting form            
            loadDepreciationData();
            document.getElementById('depreciationTableSection').style.display = 'block';
        });

        // Load journal table
        document.getElementById('getJournal').addEventListener('click', function (e) {
            e.preventDefault();
            loadDepreciationData();
            document.getElementById('depreciationTableSection').style.display = 'block';
        });

        async function loadAssetsData() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const accountFilter = document.getElementById('accountFilter').value;

            if (!startDate || !endDate) {
                showError('Please select both start and end dates.');
                return;
            }

            showLoading(true);
            hideMessages();
            const sqlQuery = `SELECT * FROM Bill WHERE TxnDate >= '${startDate}' AND TxnDate <= '${endDate}'`;

            console.log('sqlQuery:', sqlQuery);
            // Call the backend interface to obtain data: Generate a GET request URL, 
            // and the query string includes the encoded SQL statement (
            // find the records in the Bill table that meet the date conditions and print them out for debugging.)
            const url = `/bill/queryBill?query=${encodeURIComponent(sqlQuery)}`; // (Back-end API!!!!!)
            try {
                fetch(url)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! Status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        assetsData = data.billSummary || [];

                        displayAssetsData(assetsData);
                        updateSummary(assetsData, startDate, endDate);
                        showSuccess('Assets data loaded successfully!');
                    })
                    .catch(error => {
                        console.error('Error loading assets data:', error);
                        resultDiv.innerText = 'Failed to load assets data. Please check your connection and try again.';
                    });
            } catch (error) {
                console.log(error)
            } finally {
                showLoading(false);
            }
        }
        // transform asset data to the format used in toggleDepreciationTable 
        function transformDepreciationData(rawData) {
            return rawData.map(item => {
                const depreciation = {};

                // transform depreciation data
                const start = new Date(item.transactionDate);
                const end = new Date(item.lastDepreciationDate);
                const monthlyValue = parseFloat(item.monthlyDepreciation);

                // iterate through each month
                let current = new Date(start.getFullYear(), start.getMonth(), 1);
                const last = new Date(end.getFullYear(), end.getMonth(), 1);

                while (current <= last) {
                    const key = `${current.getFullYear()}-${String(current.getMonth() + 1).padStart(2, '0')}`;
                    depreciation[key] = monthlyValue;
                    current.setMonth(current.getMonth() + 1);
                }

                return {
                    asset: item.description || item.accountName || "Unnamed Asset",
                    depreciation
                };
            });
        }

        async function loadDepreciationData() {

            showLoading(true);
            hideMessages();

            try {
                const response = await fetch('/assets/getAllDatabaseAssets', {// Update the URL to match server endpoint (Back-end API!!!!!)
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const rawData = await response.json();

                // transform data
                const transformedData = transformDepreciationData(rawData);

                // render table
                toggleDepreciationTable(transformedData);
            } catch (error) {
                console.error('Error loading assets data:', error);
                showError('Failed to load assets data. Please check your connection and try again.');
            } finally {
                showLoading(false);
            }
        }

        // function displayAssetsData(data) {
        //     const tableBody = document.getElementById('assetsTableBody');
        //     const tableSection = document.getElementById('tableSection');
        //     const noData = document.getElementById('noData');
        //     const tableTitle = document.getElementById('tableTitle');

        //     tableBody.innerHTML = '';

        //     if (!data || data.length === 0) {
        //         tableSection.style.display = 'block';
        //         noData.style.display = 'block';
        //         tableTitle.textContent = 'Assets (0)';
        //         return;
        //     }

        //     tableSection.style.display = 'block';
        //     noData.style.display = 'none';
        //     tableTitle.textContent = `Assets (${data.length})`;

        //     data.forEach(asset => {
        //         const row = document.createElement('tr');
        //         row.innerHTML = `
        //             <td><strong>${asset.BillId}</strong></td>
        //             <td class="date">${formatDate(asset.TransactionDate)}</td>
        //             <td class="amount">$${formatNumber(asset.TotalAmount)}</td>
        //             <td>${asset.BillDescription}</td>
        //             <td><span class="account-tag">${asset.BillAccount}</span></td>
        //             <td><strong>${asset.BillAccountName}</strong></td>
        //             <td>
        //                 <button class="btn-edit" onclick="editAsset('${asset.BillId}')">Edit✏️</button>
        //             </td>
        //         `;
        //         tableBody.appendChild(row);
        //     });
        // }

        let currentPage = 1;
        const pageSize = 6;
        let globalData = [];

        function displayAssetsData(data, page = 1) {
            const tableBody = document.getElementById('assetsTableBody');
            const tableSection = document.getElementById('tableSection');
            const noData = document.getElementById('noData');
            const tableTitle = document.getElementById('tableTitle');
            const pagination = document.getElementById('pagination'); // pagination container

            tableBody.innerHTML = '';

            if (!data || data.length === 0) {
                tableSection.style.display = 'block';
                noData.style.display = 'block';
                tableTitle.textContent = 'Assets (0)';
                pagination.innerHTML = '';
                return;
            }

            tableSection.style.display = 'block';
            noData.style.display = 'none';
            tableTitle.textContent = `Assets (${data.length})`;

            globalData = data; // save all data
            currentPage = page;

            // calculate pagination
            const start = (currentPage - 1) * pageSize;
            const end = start + pageSize;
            const pageData = data.slice(start, end);

            // render current page data
            pageData.forEach(asset => {
                const row = document.createElement('tr');
                row.innerHTML = `
            <td><strong>${asset.BillId}</strong></td>
            <td class="date">${formatDate(asset.TransactionDate)}</td>
            <td class="amount">$${formatNumber(asset.TotalAmount)}</td>
            <td>${asset.BillDescription}</td>
            <td><span class="account-tag">${asset.BillAccount}</span></td>
            <td><strong>${asset.BillAccountName}</strong></td>
            <td>
                <button class="btn-edit" onclick="editAsset('${asset.BillId}')">Edit✏️</button>
            </td>
        `;
                tableBody.appendChild(row);
            });

            // render pagination
            renderPagination(data.length);
        }

        function renderPagination(totalItems) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            const totalPages = Math.ceil(totalItems / pageSize);

            // previous page btn
            const prevBtn = document.createElement('button');
            prevBtn.textContent = 'Previous';
            prevBtn.disabled = currentPage === 1;
            prevBtn.onclick = () => changePage(currentPage - 1);
            pagination.appendChild(prevBtn);

            // page btn
            for (let i = 1; i <= totalPages; i++) {
                const btn = document.createElement('button');
                btn.textContent = i;
                btn.classList.toggle('active', i === currentPage);
                btn.onclick = () => changePage(i);
                pagination.appendChild(btn);
            }

            // Next page
            const nextBtn = document.createElement('button');
            nextBtn.textContent = 'Next';
            nextBtn.disabled = currentPage === totalPages;
            nextBtn.onclick = () => changePage(currentPage + 1);
            pagination.appendChild(nextBtn);
        }

        function changePage(page) {
            displayAssetsData(globalData, page);
        }

        // Update the content of the Summary Cards at the top or side of the page based on asset data and date range
        function updateSummary(data, startDate, endDate) {
            const summaryCards = document.getElementById('summaryCards');
            const totalAssets = document.getElementById('totalAssets');
            const totalAmount = document.getElementById('totalAmount');
            const uniqueAccounts = document.getElementById('uniqueAccounts');
            const dateRange = document.getElementById('dateRange');

            if (!data || data.length === 0) {
                summaryCards.style.display = 'grid';
                totalAssets.textContent = '0';
                totalAmount.textContent = '$0.00';
                uniqueAccounts.textContent = '0';
                dateRange.textContent = startDate && endDate ? `${formatDate(startDate)} - ${formatDate(endDate)}` : 'Select dates';
                return;
            }

            const total = data.reduce((sum, asset) => sum + (asset.TotalAmount || 0), 0);
            const accounts = new Set(data.map(asset => asset.BillAccountName));

            totalAssets.textContent = data.length.toLocaleString();
            totalAmount.textContent = `$${formatNumber(total)}`;
            uniqueAccounts.textContent = accounts.size.toLocaleString();
            dateRange.textContent = `${formatDate(startDate)} - ${formatDate(endDate)}`;

            summaryCards.style.display = 'grid';
        }

        // Find the corresponding asset according to the incoming bill ID, 
        // fill the data into the edit pop-up form, and display the pop-up window
        function editAsset(billId) {
            const asset = assetsData.find(a => a.BillId === billId);
            if (!asset) {
                showError('Asset not found.');
                return;
            }
            document.getElementById('editBillId').value = asset.BillId;
            document.getElementById('initialCost').value = asset.TotalAmount || '';
            document.getElementById('editDepreciationYears').value = asset.DepreciationYears || '';
            document.getElementById('editSalvageValue').value = asset.SalvageValue || '';
            document.getElementById('editSalvageValue').max = asset.TotalAmount || '';
            document.getElementById('editModal').style.display = 'flex';
        }

        // Close the pop-up window without saving any changes
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // The main logic executed when clicking the "Save" button after editing asset information
        async function saveAssetChanges() {

            const formData = new FormData(document.getElementById('editForm'));
            const billId = formData.get('billId');
            console.log('Retrieved billId =', billId);

            const asset = assetsData.find(a => a.BillId === billId);
            if (!asset) {
                showError('Asset not found.');
                return;
            }

            const updatedAsset = {
                quickBooksBillId: billId,
                transactionDate: formatDate(asset.TransactionDate),
                totalAmount: parseFloat(asset.TotalAmount),
                description: asset.BillDescription,
                accountRef: asset.BillAccount,
                accountName: asset.BillAccountName,
                depreciationMethod: "Straight Line",
                salvageValue: parseFloat(formData.get('salvageValue')),
                usefulLifeYears: parseInt(formData.get('depreciationYears')),
            };
            console.log('Constructed updatedAsset =', updatedAsset);

            // Use the PUT method to indicate "update resource" and send the updated contents of the asset as a JSON string
            // Back-end API!!!!!
            try {
                const response = await fetch(`/dbImportAssets/import`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updatedAsset)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                // Update local data
                const index = assetsData.findIndex(a => a.BillId === billId);
                if (index !== -1) {
                    assetsData[index] = { ...assetsData[index], ...updatedAsset };
                    displayAssetsData(assetsData);
                    updateSummary(assetsData, document.getElementById('startDate').value, document.getElementById('endDate').value);
                }

                closeEditModal();
                showSuccess('Asset updated successfully!');

            } catch (error) {
                console.error('Error updating asset:', error);
                showError('Failed to update asset. Please try again.');
            }
        }

        // Format the date
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        }

        // Format a number as an amount with two decimal places (with thousands)
        function formatNumber(number) {
            return new Intl.NumberFormat('en-US', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(number);
        }

        // Control the display/hide of the "loading" icon or animation
        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
        }

        // Display error message (red ❌ box)
        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.innerHTML = `<strong>❌ Error:</strong> ${message}`;
            errorDiv.style.display = 'block';
            errorDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 6000);
        }

        // Display successful message
        function showSuccess(message) {
            const successDiv = document.getElementById('successMessage');
            successDiv.innerHTML = `<strong>✅ Success:</strong> ${message}`;
            successDiv.style.display = 'block';
            successDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            setTimeout(() => {
                successDiv.style.display = 'none';
            }, 4000);
        }

        // Hide error and success prompt information at one time. Call before the request starts to avoid the previous message residue
        function hideMessages() {
            document.getElementById('errorMessage').style.display = 'none';
            document.getElementById('successMessage').style.display = 'none';
        }

        // Close the edit pop-up window when clicking on the blank area of the modal box 
        // to achieve a user-friendly interactive experience
        document.getElementById('editModal').addEventListener('click', function (e) {
            if (e.target === this) {
                closeEditModal();
            }
        });

        // When the page is loaded, the depreciation data is automatically obtained from the backend 
        // and filled into the fields in the form or interface to display accounting depreciation related data
        // Back-end API!!!!!
        async function fetchDepreciationData() {
            try {
                const response = await fetch('/assets/GetAllDatabaseAssets');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();

                // supposed data format：
                // {
                //   "depreciationExpense": 500
                // }

                document.getElementById('depreciationExpense').value = data.depreciationExpense ?? 'N/A';
            } catch (error) {
                console.error('Error fetching depreciation data:', error);
                // default values
                document.getElementById('depreciationExpense').value = 'Loading...';
            }
        }

        // fetchDepreciationData() is executed immediately after the entire HTML page DOM is loaded, 
        // ensuring that the data is automatically fetched and displayed when the page is opened
        window.addEventListener('DOMContentLoaded', fetchDepreciationData);

        // Based on the depreciation data returned by the backend, an "asset depreciation table" is dynamically generated and displayed, 
        // covering the depreciation amount distribution for a total of 13 months before and after the current month.
        function toggleDepreciationTable(data) {
            // depreciation table
            const table = document.getElementById("depreciationTable");
            table.innerHTML = "";

            const today = new Date();
            const currentMonth = new Date(today.getFullYear(), today.getMonth(), 1);

            // months
            const months = [];
            for (let i = -6; i <= 6; i++) {
                const d = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + i, 1);
                const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;
                const label = d.toLocaleString("en-US", { month: "short" }).toUpperCase();
                months.push({ key, label, isCurrent: i === 0 });
            }

            const theadRow = document.createElement("tr");
            theadRow.appendChild(document.createElement("th"));
            months.forEach(m => {
                const th = document.createElement("th");
                th.textContent = m.label;
                if (m.isCurrent) th.classList.add("current-month");
                theadRow.appendChild(th);
            });
            table.appendChild(theadRow);

            // assets depreciation rows
            data.forEach(assetEntry => {
                const tr = document.createElement("tr");
                const tdAsset = document.createElement("td");
                tdAsset.textContent = assetEntry.asset;
                tdAsset.classList.add("asset-name");
                tr.appendChild(tdAsset);

                months.forEach(m => {
                    const td = document.createElement("td");
                    const value = assetEntry.depreciation[m.key] ?? "";
                    td.textContent = value !== "" ? Number(value).toFixed(2) : ""; // retain 2 digits
                    if (m.isCurrent) td.classList.add("current-month");
                    tr.appendChild(td);
                });

                table.appendChild(tr);
            });
        }

         // Update button function: pull the monthly depreciation amount and display it in the input box
    document.getElementById('updateJournalBtn').addEventListener('click', async () => {
        try {
            const response = await fetch('/assets/calculateMonthEndDepreciation');
            if (!response.ok) throw new Error('Failed to calculate depreciation');

            const data = await response.json();
            const amount = data.totalMonthlyDepreciation ?? 0;

            document.getElementById('depreciationExpense').value = amount.toFixed(2);
            showSuccess('Updated depreciation expense for the current month.');
        } catch (err) {
            console.error(err);
            showError('Unable to update depreciation amount. Please try again.');
        }
    });


    // Submit button function: Submit form data to QuickBooks
    document.getElementById('submitJournalBtn').addEventListener('click', async () => {
        try {
            const response = await fetch('/postJournalEntry', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({}) // If data needs to be transferred, fill it on demand
            });

            if (!response.ok) throw new Error('Failed to post journal entry');

            const result = await response.json();
            showSuccess('Journal entry submitted successfully!');
        } catch (err) {
            console.error(err);
            showError('Failed to submit journal entry. Please check your QuickBooks connection.');
        }
    });

    </script>
</body>

</html>